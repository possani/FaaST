---
# file: roles/kubernetes/tasks/main.yml
- name: Add a GPG key for the packages
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
  become: True

- name: Add repository for kubernetes
  apt_repository:
    repo: deb  http://apt.kubernetes.io/  kubernetes-xenial  main
    state: present
  become: True

- name: Install a list of packages
  apt:
    pkg:
      - kubeadm=1.18.3-00
      - kubelet=1.18.3-00
      - kubectl=1.18.3-00
  become: True

- name: Prevent packages from being upgraded.
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  with_items:
    - kubeadm
    - kubelet
    - kubectl
  become: True

- name: Add IP address of all hosts to all hosts
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ inventory_hostname }}$"
    line: "{{ hostvars[inventory_hostname].ansible_ssh_host }} {{ inventory_hostname }}"
    state: present
  become: True

- name: Copy config to host
  template:
    src: "{{ role_path }}/templates/kubeadm-config.yml.j2"
    dest: $PWD/kubeadm-config.yml
    mode: "0644"

- name: Copy cloud config to host
  template:
    src: "{{ role_path }}/templates/cloud.conf.j2"
    dest: /etc/kubernetes/cloud-config
  become: True

- name: Run kubeadmin init
  shell: kubeadm init --config=kubeadm-config.yml --upload-certs | tee kubeadm-init.out
  become: True

- name: Create config directory for non-root user
  file:
    path: $PWD/.kube
    state: directory
    mode: "0755"

- name: Copy config file to non-root user directory
  copy:
    remote_src: yes
    src: /etc/kubernetes/admin.conf
    dest: $PWD/.kube/config
    owner: "{{ user }}"
    group: "{{ user }}"
  become: True

- name: Check for taint
  shell: kubectl describe node {{ ansible_hostname }} | grep "node-role.kubernetes.io/master:NoSchedule"
  register: hasTaint
  ignore_errors: True

- name: Remove the taint from master
  command: kubectl taint node {{ ansible_hostname }} node-role.kubernetes.io/master:NoSchedule-
  when: hasTaint is succeeded

- name: Copy files to host
  copy:
    src: "{{ item }}"
    dest: $PWD/
  with_fileglob:
    - "{{ role_path }}/files/*"

- name: Apply cloud-controller-manager-roles.yaml
  command: kubectl apply -f cloud-controller-manager-roles.yaml

- name: Apply cloud-controller-manager-role-bindings.yaml
  command: kubectl apply -f cloud-controller-manager-role-bindings.yaml

- name: Apply cloud-controller-manager.yaml
  command: kubectl apply -f cloud-controller-manager.yaml

- name: Get Kubernetes version
  shell: kubectl version | base64 -w 0
  register: k8sversion

- name: Apply the network plugin configuration
  command: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version={{ k8sversion.stdout }}"

- name: Create Dashboard
  command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml

- name: Copy dashboard-admin-user.yaml to the cluster
  copy:
    src: "{{ role_path }}/files/dashboard-admin-user.yaml"
    dest: $PWD/dashboard-admin-user.yaml

- name: Create the admin user
  command: kubectl apply -f dashboard-admin-user.yaml

- name: Save token to file
  shell: kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user | awk '{print $1}') | grep "token:" | awk '{print $2}' | tee admin-user-token.out

- name: Fetch token from remote
  fetch:
    src: admin-user-token.out
    dest: from_remote

- name: Install helm
  snap:
    name: helm
    classic: yes
  become: True

- name: Get Helm releases
  shell: /snap/bin/helm list -A
  register: helm_releases

- name: Clone cinder's git repository
  git:
    repo: https://github.com/kubernetes/cloud-provider-openstack.git
    dest: $PWD/cinder
    force: yes

- name: Install Cinder
  command: /snap/bin/helm install cinder-csi cinder/charts/cinder-csi-plugin -n kube-system #--set storageClass.delete.isDefault=true
  when: helm_releases.stdout.find('cinder-csi') == -1

- name: Add stable repository
  command: /snap/bin/helm repo add stable https://kubernetes-charts.storage.googleapis.com

- name: Update repositories
  command: /snap/bin/helm repo update

- name: Install Prometheus for monitoring
  command: /snap/bin/helm install prometheus-operator stable/prometheus-operator -n prometheus-operator --create-namespace -f grafana-prometheus-values.yaml
  when: helm_releases.stdout.find('prometheus-operator') == -1
