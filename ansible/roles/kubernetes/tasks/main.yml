---
# file: roles/kubernetes/tasks/main.yml
- name: Disable ipv6 and swap
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
  with_items: "{{ sysctl }}"

- name: Add a GPG key for the packages
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: Add repository for kubernetes
  apt_repository:
    repo: deb  http://apt.kubernetes.io/  kubernetes-xenial  main
    state: present

- name: Install a list of packages
  apt:
    pkg:
      - kubeadm=1.18.3-00
      - kubelet=1.18.3-00
      - kubectl=1.18.3-00

- name: Prevent kubeadm from being upgraded.
  dpkg_selections:
    name: kubeadm
    selection: hold

- name: Prevent kubelet from being upgraded.
  dpkg_selections:
    name: kubelet
    selection: hold

- name: Prevent kubectl from being upgraded.
  dpkg_selections:
    name: kubectl
    selection: hold

- name: Add IP address of all hosts to all hosts
  lineinfile:
    dest: /etc/hosts
    regexp: ".*{{ item }}$"
    line: "{{ hostvars[item].ansible_ssh_host }} {{ item }}"
    state: present
  when: hostvars[item].ansible_ssh_host is defined
  with_items: "{{ groups.cloud }}"

- name: Copy config to host
  template:
    src: "{{ role_path }}/templates/kubeadm-config.yml.j2"
    dest: $PWD/kubeadm-config.yml
    mode: "0644"

- name: Copy cloud config to host
  template:
    src: "{{ role_path }}/templates/cloud.conf.j2"
    dest: /etc/kubernetes/cloud-config
    mode: "0644"

- name: Run kubeadmin init
  shell: kubeadm init --config=kubeadm-config.yml --upload-certs | tee kubeadm-init.out

- name: Create config directory for non-root user
  file:
    path: $PWD/.kube
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0755"

- name: Copy config file to non-root user directory
  copy:
    remote_src: yes
    src: /etc/kubernetes/admin.conf
    dest: $PWD/.kube/config
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0644"

- name: Check for taint
  shell: kubectl describe node {{ master }} | grep "node-role.kubernetes.io/master:NoSchedule"
  register: hasTaint
  ignore_errors: True
  become: True
  become_user: "{{ user }}"

- name: Remove the taint from master
  command: kubectl taint node {{ master }} node-role.kubernetes.io/master:NoSchedule-
  when: hasTaint is succeeded
  become: True
  become_user: "{{ user }}"

- name: Copy cloud-controller-manager-roles.yaml to the cluster
  copy:
    src: "{{ role_path }}/files/cloud-controller-manager-roles.yaml"
    dest: $PWD/cloud-controller-manager-roles.yaml
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0644"

- name: Copy cloud-controller-manager-role-bindings.yaml to the cluster
  copy:
    src: "{{ role_path }}/files/cloud-controller-manager-role-bindings.yaml"
    dest: $PWD/cloud-controller-manager-role-bindings.yaml
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0644"

- name: Copy cloud-controller-manager.yaml to the cluster
  copy:
    src: "{{ role_path }}/files/cloud-controller-manager.yaml"
    dest: $PWD/cloud-controller-manager.yaml
    owner: "{{ user }}"
    group: "{{ user }}"
    mode: "0644"

- name: Apply cloud-controller-manager-roles.yaml
  command: kubectl apply -f cloud-controller-manager-roles.yaml
  become: True
  become_user: "{{ user }}"

- name: Apply cloud-controller-manager-role-bindings.yaml
  command: kubectl apply -f cloud-controller-manager-role-bindings.yaml
  become: True
  become_user: "{{ user }}"

- name: Apply cloud-controller-manager.yaml
  command: kubectl apply -f cloud-controller-manager.yaml
  become: True
  become_user: "{{ user }}"

- name: Get Kubernetes version
  shell: kubectl version | base64 -w 0
  register: k8sversion
  become: True
  become_user: "{{ user }}"

- name: Apply the network plugin configuration
  command: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version={{ k8sversion.stdout }}"
  become: True
  become_user: "{{ user }}"

- name: Create Dashboard
  command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
  become: True
  become_user: "{{ user }}"

- name: Install helm
  snap:
    name: helm
    classic: yes

- name: Clone cinder's git repository
  git:
    repo: https://github.com/kubernetes/cloud-provider-openstack.git
    dest: $PWD/cinder
    force: yes

- name: Patch buggy statefulset
  lineinfile:
    path: cinder/charts/cinder-csi-plugin/templates/controllerplugin-statefulset.yaml
    firstmatch: yes
    line: "  serviceName: csi-cinder-controller"
    insertafter: "^spec:"

- name: Install Cinder
  command: /snap/bin/helm install --namespace kube-system cinder-csi cinder/charts/cinder-csi-plugin
  become: True
  become_user: "{{ user }}"
